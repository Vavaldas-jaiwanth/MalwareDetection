import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import math
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import f1_score,accuracy_score,auc,confusion_matrix
import pefile
malData=pd.read_csv(r"C:\Users\vaval\Desktop\jup\MalwareData.csv",sep="|",low_memory=True)
print(malData.shape)
#malData.head()
malData['legitimate'].value_counts()[0]
#malData.columns
k = malData["ResourcesMaxEntropy"].mean()
print(k)

fig=plt.figure()
ax=fig.add_axes([0,0,1,1])
ax.hist(malData['legitimate'],20)
plt.show()

malData=malData.drop(['Name'],axis=1)
malData=malData.drop(['md5'],axis=1)
# Calculate the cou
#rrelation matrix
correlation_matrix = malData.corr()

# Create a heatmap of the correlation matrix
plt.figure(figsize=(50, 20))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Matrix')
plt.show()

y=malData['legitimate']
malData=malData.drop(['legitimate'],axis=1)

# Specify the columns to keep
columns_to_keep = ['Machine', 'SizeOfOptionalHeader', 'MajorSubsystemVersion','DllCharacteristics','SizeOfStackReserve','SectionsMeanEntropy','SectionsMaxEntropy','Subsystem','ResourcesMaxEntropy','VersionInformationSize']

# Keep only the specified columns
malData = malData[columns_to_keep]
x_train,x_test,y_train,y_test=train_test_split(malData,y,test_size=0.3,random_state=42)

print(x_train.shape)
clf=RandomForestClassifier(max_depth=2,random_state=0)
randomModel=clf.fit(x_train,y_train)

#accuracy of trained dataset
train_pred=randomModel.predict(x_train)
accuracy_score(y_train,train_pred)
print(train_pred)

#accuracy of test dataset
prediction=randomModel.predict(x_test)
print("accuracy:",accuracy_score(y_test,prediction))
print(prediction)

print(f1_score(y_test,prediction))

confusionmatrix=confusion_matrix(y_test,prediction)
print(confusionmatrix)

sns.heatmap(confusionmatrix,annot=True)

# Path to the executable file
file_path = 'boy.exe'

# Load the executable file
pe = pefile.PE(file_path)

section_entropies = []
for section in pe.sections:
    section_data = section.get_data()
    size = len(section_data)
    if size > 0:
        entropy = sum((section_data.count(c) / size) * math.log2(section_data.count(c) / size) for c in set(section_data))
        section_entropies.append(entropy)
# Extract the required features
features = {
    'Machine': pe.FILE_HEADER.Machine,
    'SizeOfOptionalHeader': pe.FILE_HEADER.SizeOfOptionalHeader,
    'MajorSubsystemVersion': pe.OPTIONAL_HEADER.MajorSubsystemVersion,
    'DllCharacteristics': pe.OPTIONAL_HEADER.DllCharacteristics,
    'SizeOfStackReserve': pe.OPTIONAL_HEADER.SizeOfStackReserve,
    'SectionsMeanEntropy': sum(section_entropies) / len(section_entropies),
    'SectionsMaxEntropy': max(section_entropies),
    'Subsystem': pe.OPTIONAL_HEADER.Subsystem,
    'ResourcesMaxEntropy': 6,
    'VersionInformationSize':12,
}
resource_directory = pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_RESOURCE']]
if resource_directory.VirtualAddress != 0:
    resource_section = pe.get_section_by_rva(resource_directory.VirtualAddress)
    resource_data = resource_section.get_data()
    resources_entropy = sum((resource_data.count(c) / len(resource_data)) * math.log2(resource_data.count(c) / len(resource_data)) for c in set(resource_data))
    features['ResourcesMaxEntropy'] = resources_entropy
    
    for resource_type in resource_directory.entries:
        if hasattr(resource_type, 'name') and resource_type.name.string.decode() == 'VERSIONINFO':
            for resource_id in resource_type.directory.entries:
                version_info = resource_id.directory.entries[0].data.struct
                features['VersionInformationSize'] = version_info.Length



# Print the extracted features
lst=[]
for feature, value in features.items():
    print(f'{feature}: {value}')
    lst.append(value)

print(lst)

pred=randomModel.predict([lst])
print(pred)

if(pred[0]==0):
    print("File is safe")
else:
    print("File contains ransomware")  

    